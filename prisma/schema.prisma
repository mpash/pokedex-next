// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["fullTextSearch"]
}

// Local Postgres Storage
// datasource db {
//   provider = "postgresql"
//   url      = env("DATABASE_URL")
// }

// Vercel Postgres Storage
datasource db {
  provider          = "postgresql"
  url               = env("POSTGRES_PRISMA_URL") // uses connection pooling
  directUrl         = env("POSTGRES_URL_NON_POOLING") // uses a direct connection
  shadowDatabaseUrl = env("POSTGRES_URL_NON_POOLING") // used for migrations
}

// Neon Postgres Storage
// datasource db {
//   provider          = "postgresql"
//   url               = env("DATABASE_URL")
//   directUrl         = env("DIRECT_URL")
//   // If you want to use Prisma Migrate, you will need to manually create a shadow database
//   // https://neon.tech/docs/guides/prisma-migrate#configure-a-shadow-database-for-prisma-migrate
//   // make sure to append ?connect_timeout=10 to the connection string
//   shadowDatabaseUrl = env("SHADOW_DATABASE_URL")
// }

model Pokemon {
  id               Int                @id @default(autoincrement())
  sourceId         Int
  name             String
  slug             String
  number           String
  weight           Float
  height           Int
  hp               Int?
  attack           Int?
  defense          Int?
  spAttack         Int?
  spDefense        Int?
  speed            Int?
  image            String
  descriptionX     String
  descriptionY     String
  detailPageURL    String
  collectiblesSlug String
  thumbnailAltText String
  thumbnailImage   String
  subVariant       Int
  createdAt        DateTime           @default(now())
  updatedAt        DateTime           @updatedAt
  // Relations
  types            PokemonType[]
  weaknesses       PokemonType[]      @relation("PokemonWeaknesses")
  abilities        PokemonAbility[]
  japaneseMeta     JapaneseMeta?
  primaryColor     PrimaryColor?
  regionId         Int?
  region           Region?            @relation(fields: [regionId], references: [id])
  evolvesFrom      PokemonEvolution[] @relation("EvolveFrom")
  evolvesTo        PokemonEvolution[] @relation("EvolveTo")
}

model PokemonType {
  id           Int       @id @default(autoincrement())
  type         String    @unique
  // Relations
  pokemon      Pokemon[]
  weakPokemons Pokemon[] @relation("PokemonWeaknesses")
}

model PokemonAbility {
  id      Int       @id @default(autoincrement())
  ability String    @unique
  // Relations
  pokemon Pokemon[]
}

model JapaneseMeta {
  id         Int     @id @default(autoincrement())
  kyodai_flg Int
  image_s    String
  sub_name   String
  sub        Int
  type_2     Int
  image_m    String
  no         String
  type_1     Int
  takasa     String
  zukan_no   String
  name       String
  omosa      String
  // Relations
  pokemonId  Int     @unique
  pokemon    Pokemon @relation(fields: [pokemonId], references: [id])
}

model PrimaryColor {
  id        Int     @id @default(autoincrement())
  r         Int
  g         Int
  b         Int
  // Relations
  pokemonId Int     @unique
  pokemon   Pokemon @relation(fields: [pokemonId], references: [id])
}

model Region {
  id       Int       @id @default(autoincrement())
  sourceId Int       @unique
  name     String    @unique
  // Relations
  pokemon  Pokemon[]
}

model PokemonEvolution {
  id           Int     @id @default(autoincrement())
  order        Int
  // Relations
  evolveFromId Int
  evolveFrom   Pokemon @relation("EvolveFrom", fields: [evolveFromId], references: [id])
  evolveToId   Int
  evolveTo     Pokemon @relation("EvolveTo", fields: [evolveToId], references: [id])
}
